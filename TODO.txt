# Summer 

* Forked repo for Tufte/chapter folders/menu testing: https://github.com/itsyaoyu/PPBDS

* Document `site: bookdown::bookdown_site` knowledge. Ask a question about this at RStudio Community, or elsewhere. Is specifying that option in the file itself really necessary to build the book? What about passing it, or something like it, as an argument to an R command? Not necessary to get the button to work.
  + putting chapters in their own folders removes the need to touch this yaml option. This option is needed for the build book panel: https://community.rstudio.com/t/no-build-pane-build-book-option-using-bookdown/36415/5
  + Also can build book with: `bookdown::render_book('index.Rmd', 'bookdown::tufte_html_book')`

* If a chapter is in its own folder, how can it access settings from _output.yml? (Are there other things it needs to "see"?) Maybe create a YAML header which encodes the name/location of the file?
  + Solution I found was to cp _output.yml to each folder

* Build the book with this new structure.
  + Attempt with index and chapter 1: https://ppbds-tufte.netlify.app/
  + Chapter 2 completely broke with line 2034 as the site linked no longer exists (http://citibikenyc.com/stations/json)

* Get table of contents in some sensible fashion. Ask Stanford people. Ask Stack Overflow, reproducible.
  + Tried to use Kieran's method, unsuccessful: https://ppbds-tufte.netlify.app/
  + But, I don't think I fully understand how his method works yet. So I might be doing something wrong. Testing w/ forked repo: https://github.com/itsyaoyu/PPBDS
  + Need to do more testing.


*  Revisit the discussion below about a possible bug. Create a fake chapter, yao.Rmd, and work with that. Edit the _bookdown.yml to make sure you can build the book (with just that chapter) and that you can preview_chapter(). Again, I think that adding a YAML header to each chapter is not a bad approach. Once that is working, can it work with other chapters? 
  + Repo I used for testing: https://github.com/itsyaoyu/bookdown-testing



## Previous discussions

     

## Book Building

* [*Bookdown*](https://bookdown.org/yihui/bookdown/) is the key reference. 

* bookdown::preview_chapter("01-visualization.Rmd", "bookdown::gitbook", output_dir = "junk") seems to do an adequate job of allowing a writer to build just one chapter. The first argument is `input` and the second is `output_format`. Not sure why we need to provide the second. Shouldn't it be able to look in the   "_bookdown.yml" file, as it does for the `output_dir` argument? I suspect that this is a bug. 

  + One annoyance is the requirement to set `output_dir` to junk. If you don't set it to something, then you change the files in the doc/ directory, the location for which is deduced from the "_bookdown.yml" file. This causes confusion. We don't want to check in random stuff.

    

* Where does the book go? We currently use [Github pages](https://pages.github.com/). We should use a better location for the permanent version. We need separate locations: a permanent released version which does not change all semester and a development version which we work on live. Explore how ModernDive does things: [here](https://moderndive.com/) and [here](https://github.com/moderndive/ModernDive_book).  Come up with a plan to move the whole thing to Netlify. I have a Netlify account. Sign up for a free account yourself and experiment.  

  + Follow [this approach](https://cerebralmastication.com/2019/05/11/publishing-bookdown-to-netlify-automagically/). This method builds in seconds using the HTML files in /docs. We can use `preview_chapter()` to update only the HTMLs that we are changing. This will make it easy to fix chapters one-by-one and build the book rapidly (through individual chapters).
  
  + [Working beta using alternative solution](https://ppbds-testing.netlify.app/)
  

* While pondering the above, experiment by setting up a release version using the code as of the [one release](https://github.com/davidkane9/PPBDS/releases/tag/v1.0) which I tagged. We can do this "by hand" the first time. The [545 book](https://github.com/rstudio-education/stat545) may handle this intelligently. Maybe we need to create a branch for such a release?

  + Thoughts: Branch should work. I will look to see if netlify can use releases instead of every push.

* `knitr::include_graphics()` does not seem to produce an error when we build the book, even if the file is missing. How can we make sure it does error? And what should our standard use of this tool look like? One approach: [Using Images in Figures](http://zevross.com/blog/2017/06/19/tips-and-tricks-for-working-with-images-and-figures-in-r-markdown-documents/).  Related: Offer an opinion about the best way to include Allison's [cartoons](https://github.com/allisonhorst/stats-illustrations). We don't want to include all these and then have to edit them all.

* What default options do we need, and where are they set. The index.Rmd file used to include:

# options(width = 80, digits = 7, bookdown.clean_book = TRUE, knitr.kable.NA = 'NA')
# 
# knitr::opts_chunk$set(
#   tidy = FALSE, 
#   out.width = '\\textwidth', 
#   fig.align = "center", 
#   comment = NA) 

I just deleted it. Does it matter? This seems like a hack, especially for when you want to compile a single chapter. What is the cool way to handle that? homlr uses individual options for each chapter. Will need to find if any better way to do this.

* How can we make the book build faster? Maybe we should use cache=TRUE for the slow chunks. But which chunks are those?

* Build it under 4.0.1

* How do we print it? I like the PDF version of Rafa's [book](https://leanpub.com/datasciencebook) available from Lean Pub. How hard is that to make?  

* Is there a way to print out messages during the book building process so that you know where the process is? Recall that we can't (?) use R code chunk names because duplicate code chunk names cause (still?) the process to blow up.

* Think about the data directory. Do we really need all these files? Couldn't we create them on the fly? What do we do when we need to update them?

* Think about the images directory. What a pile of crap! Do we need all these? How can we re-organize to make it more maintainable in the future. Maybe start by making a new img/ directory and then just moving over the images we are currently using?

* Consider using notes: https://desiree.rbind.io/post/2019/making-tip-boxes-with-bookdown-and-rmarkdown/

* Think about the bib/ directory. We need to fix our citations. Automate the citation of whatever packages we are using. The references are a mess, put together from 3 different original sources. First, there a bib directory, with three files in it. Second, within index.Rmd there was a call to knitr::write_bib, which is a famously dangerous and confusing function. I guess that this creates packages.bib. (I have since deleted this.) Third, there is the links.md file, which is supposed to replace a lot of the references like @R-readr, mainly in chapter 2. That seems not to work at all. Come up with a plan to deal with all these.

* Think about packages. Note that the [545 book](https://github.com/rstudio-education/stat545) uses a fairly sophisticated plan, involving the new **renv** package.


* Can you rebuild just a single chapter and then commit/push it? Right now, I have to rebuild the whole thing each time I want to make a single change. Takes too long.


* How do we centralize the loading of packages? What is our plan for loading libraries and removing them when they are no longer need? Chapter 11 contained an annoying bug: rvest and purrr both have pluck() as a function. Need to ensure that you get the purrr version if you need it. Bug only showed up when Chapter 5 (with rvest loaded) was used in the build. Organize packages. What are all the packages we need? How do we ensure that we cite them all, as we should? Where do we load them? Again, there must be best practices for stuff like this. Only use high quality packages, and recommend the same to readers. When are different packages introduced? Where is this written down? Need to be intentional about what we introduced outside of the tidyverse --- janitor, ggthemes, reprex, fs, skimr, gt, googlesheets4, infer, gtsummary --- and when we do it. One annoyance is that new contributors have to try to compile the book a dozen times before it will work because there is no way to know, ahead of time, which packages are required. Make the book an R package?

* Consider the use of before_chapter_script: "_common.R" in the DS _bookdown.yml as well as the associated _common.R file. Is this an approach we should copy? The lack of this why I can't get all the DS chapters to work. Combine _common.R, common.R and index.Rmd information into one place. Need to figure out how this works in bookdown. I think we need one file which only runs once when you make the book. That files does a bunch of stuff involving copying over files. But you don't maintain state after running that file, so any new functions are lost. Then you have a second file, like _common.R, which is run at the start of compiling each chapter.

* The book has lots of references, especially to other chapters. Many of these don't work because the referred-to chapters don't exist. We need a thorough clean up.

* Deal with bibliography. Our source books use very different approaches. write_bib() is infamous for making trouble. I like the way that MD writes out new versions of citations associated with R packages that have been updated.

* Seems like all chapters generate references at the end. That is fine, but it should be standardized. Or do all those references belong at the end?



## Other Items


The world confronts us. We must make decisions. The data we want is missing. So, we create models, make estimates, admit to our uncertainty, and then decide. 

## Unclassified Items



* Fix "No additional resources" in Chapter 6 and 7. Standardize this section across all chapters. 545 is different. Delete everywhere?

* Take (?) material from: https://chabefer.github.io/STCI/; https://github.com/chabefer/SKY

* Some chapters, like productivity.Rmd have a lot of footnotes. Good or bad?

* Revisit the Prediction Game. 


````markdown
`r ''````{r}
plot(cars)
```
````

### From the Bookdown book

preview_chapter() and serve_book() as aid to chapter writers. 

webshot() tool for including images taken from webpages. Everytime we mention how cool source X is, we should provide a webshot of it. (And we should test that it exists.) Make the productivity chapter include way less of our prose.

switch to tufte() style, ask Healy. Or this guy: http://nickchk.com/chapter5.pdf

Kindle book

put the book on bookdown.org, or class assignments


Key concepts which need to be put everywhere:

decisions need models
potential outcomes and causal effects
units, treatments, outcomes
randomization is magic: assignment to estimate causal effects, bootstrap to estimate uncertainty

Describe, predict, infer. Description of things you can see, prediction for things you will see and inference about things you will never see.

Prediction checks.

Bias/Variance == Underfitting/Overfitting

Drop all the frequentist nonsense except for a footnote at the first use with a confidence interval and an appendix which walks students through the Kuske arguments.


Discuss RCM, assuming that we are estimating a causal effect of some type. And, if we are not estimating causal effects (i.e., all we care about is prediction), then the mechanics of lm are the same, but the interpretation of the regression coefficient has no causal implications.  We want a series of tables illustrating potential outcomes and our estmation of them. Start with a table with ?, just as in the Appendix. We use linear regression to fill in these questions marks. Show table with question marks and then show table with question marks filled in with best guess. Then show table with question marks filled in with a confidence interval for the mean and then for a distribution of predicted values. The closer we can tie RCM to the different parts of a regression, the better. But do this each chapter, not just regression.



Each chapter should finish with a new section which uses list-columns plus broom to estimate scores of models, and then pull out interesting models. See the gapminder examples from https://r4ds.had.co.nz/many-models.html#gapminder. We need the full tool set: nest, unnest and so on.

Each chapter begins with a real example, a decision we must make (if only the prediction game), and then creates a model which we will use to help us. Bets are always offered. RCM discussed. Bias scenarios demonstrated. The secret weapon --- a model for each state or each year --- used.  


## Other summer issues


https://committedtotape.shinyapps.io/freeR/


Replace all photos of activities with photos from Harvard, using Tsai.

Chapters 7, 8 and 9 

## Approaches to Include?

xgboost: https://www.r-bloggers.com/using-xgboost-with-tidymodels/

I really like the Kruchke and brms combination: https://bookdown.org/content/3686/

https://bookdown.org/content/3686/


### Use of Note Boxes

https://desiree.rbind.io/post/2019/making-tip-boxes-with-bookdown-and-rmarkdown/


http://statprep.org/

## Other Topics


missing data
regresssion towards the mean
prediction/classification
map/network/text

